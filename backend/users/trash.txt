class AttendanceSummaryView(APIView):
    def get(self, request, user_id):
        try:
            user = User.objects.get(id=user_id)
        except User.DoesNotExist:
            raise Http404('User not found')
        
        

        records = Attendance.objects.filter(user=user)

        total_hours = present_days = incomplete_days = 0

        for record in records:
            if record.check_in_time and record.check_out_time:
                check_in = make_aware(datetime.combine(date.min, record.check_in_time))
                check_out = make_aware(datetime.combine(date.min, record.check_out_time))
                duration = check_out - check_in
                total_hours += duration.total_seconds() / 3600
                present_days += 1
            else:
                incomplete_days += 1
        
        _, total_days_in_month = calendar.monthrange(year, month)
        working_days = sum(1 for day in range(1, total_days_in_month + 1)
                           if date(year, month, day).weekday() < 5)

        working_days = (date.today() - records.earliest('date').date).days + 1 if records.exists() else 0
        total_leaves = working_days - present_days if working_days > 0 else 0

        data = {
            'user_id': user.id,
            'username': user.username,
            'total_hours': round(total_hours, 2),
            'total_days_present': present_days,
            'incomplete_days': incomplete_days,
            'total_leaves': total_leaves
        }

        serializer = AttendanceSummarySeriallizer(data=data)
        serializer.is_valid(raise_exception=True)
        return Response(serializer.data)
